function objectIsValid(...obj){
	return obj.every(e => e != undefined && e != null);
}

const appProto = 'msteams-chat://';
const pollEventPattern = '/events/poll';
const consoleStyleWarning = 'background: #000; color: #bada55; font-size: 20px; padding: 8px;';

const original_proto = {
    open: XMLHttpRequest.prototype.open,
    setRequestHeader: XMLHttpRequest.prototype.setRequestHeader
};

XMLHttpRequest.prototype.open = function(method, url){
    original_proto.open.apply(this, arguments);
	
	this.target_url = url;
    if(url.search(pollEventPattern) != -1){
		this.is_poll_event = true;
        console.log(url);
    }
}

XMLHttpRequest.prototype.setRequestHeader = function(a, b){
    original_proto.setRequestHeader.apply(this, arguments);
    
    if(objectIsValid(this.target_url, this.is_poll_event, a, b) && a == 'Authentication' && b.startsWith('skypetoken=')){
        XMLHttpRequest.prototype.setRequestHeader = original_proto.setRequestHeader;
        XMLHttpRequest.prototype.open = original_proto.open;
		
		let packedData = btoa(JSON.stringify({
			'skype-token': b.split('=')[1],
			'personal-url': this.target_url.replace(pollEventPattern, ''),
			'chat-id': /threadId=(\S*)@/gi.exec(window.location.href)[1],
		}));
		
		let formedLink = `${appProto}${packedData}`;
		window.open(formedLink, '_blank');
		console.log(`%c Если окна запроса на открытие приложения нет, тогда щелкните по следующей ссылке: ${formedLink}`, consoleStyleWarning);
    }
}

console.log('%c Ничего не делайте, пока не появится окно запроса на открытие приложения (подтвердите открытие)', consoleStyleWarning);
